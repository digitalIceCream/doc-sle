<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0"
         xml:id="cha-security-cryptopolicy">
  <!--taroth 2023-04-28
    Main ToDos (based on https://bugzilla.suse.com/show_bug.cgi?id=1209998#c7)
    * add new chapter to Security Guide, describe also integration
    * explain how we intend customers to use the crypto-policies
    * explain what changed exactly and what impact this has,
    e.g. if someone updates from SP3 (no active crypto-policies)
    to SP4 (active crypto-policies)-->
  <title>Using system-wide cryptographic policies</title>
  <info>
    <abstract>
      <para>
        bla
      </para>
    </abstract>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker></dm:bugtracker>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <sect1 xml:id="sec-security-cryptopolicy-oview">
    <title>Conceptual overview</title>

    <para>
      The <package>crypto-policies</package> RPM package provides pre-built
      configuration files with cryptographic policies for cryptographic
      back-ends, such as SSL/TLS libraries. This package allows to set the
      cryptographic security level for all applications that use a
      cryptographic back-end supported by the policies.
    </para>

    <para>
      Crypto-policies apply to the configuration of the core cryptographic
      subsystems. They cover the supported secure communications protocols on
      the base operating system, such as TLS, IKE, IPSec, DNSSec and Kerberos
      protocols. Having crypto-policies allows to easily handle the deprecation
      of algorithms or protocols system-wide and in a transparent manner.
    </para>
  </sect1>
  <sect1>
    <title>Predefined policy levels</title>

    <para>
      The <package>crypto-policies</package> package comes with the following
      predefined policy levels:
    </para>

    <variablelist>
      <varlistentry>
        <term>DEFAULT</term>
        <listitem>
          <para>
            A reasonable default policy for today's standards. It allows the
            TLS 1.2, and TLS 1.3 protocols, as well as IKEv2 and SSH2. The
            Diffie-Hellman parameters are accepted if they are at least 2048
            bits long. The level provides at least 112-bit security with the
            exception of allowing SHA-1 signatures in DNSSec where they are
            still prevalent.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>FIPS</term>
        <listitem>
          <para>
            A level that conforms to the FIPS 140-2 requirements. This policy
            is used internally by the <command>fips-mode-setup</command> tool
            which can switch the system into FIPS 140-2 compliance mode. The
            level provides at least 112-bit security.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>FUTURE</term>
        <listitem>
          <para>
            A conservative security level that is believed to withstand any
            near-term future attacks. This level does not allow the use of
            SHA-1 in signature algorithms. The level also provides some (not
            complete) preparation for post-quantum encryption support in form
            of 256-bit symmetric encryption requirement. The RSA and
            Diffie-Hellman parameters are accepted if larger than 3071 bits.
            The level provides at least 128-bit security.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LEGACY</term>
        <listitem>
          <para>
            This policy ensures maximum compatibility with legacy systems. It
            is less secure and it includes support for TLS 1.0, TLS 1.1, and
            SSH2 protocols or later. The algorithms DSA, 3DES, and RC4 are
            allowed, while RSA and Diffie-Hellman parameters are accepted if
            larger than 1023 bits. The level provides at least 64-bit security.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      Policies can change over time together with the security of the
      cryptographic components. For the latest details on the individual
      policies, therefore see the man page of
      <command>crypto-policies</command>. All predefined policies are located
      in
      <filename>/usr/share/crypto-policies/policies<replaceable>NAME</replaceable>.pol</filename>
      and are read-only.
    </para>
  </sect1>
  <sect1>
    <title>Switching to a different crypto-policy level</title>

    <para>
      Use the <command>update-crypto-policies</command> to set the policy level
      which is applied to the cryptographic back-ends. It is the default policy
      used by these back-ends unless the application user configures them
      otherwise.
    </para>

    <procedure>
      <step>
        <para>
          To check the crypto-policy level that is currently in use:
        </para>
<screen>&prompt.root;<command>update-crypto-policies --show</command></screen>
      </step>
      <step>
        <para>
          To switch to a different policy level, use the <option>--set</option>
          option:
        </para>
<screen>update-crypto-policies --set <replaceable>POLICY</replaceable></screen>
        <remark>taroth 2023-07-04: do we need a word of caution here for LEGACY and FIPS?
          and can we tell that switching to 'LEGACY' enables compatibility with a specific
          older SLE version, like SLE 12 SP5 or so?
        </remark>
        <important>
          <title>LEGACY crypto-policy level is less secure</title>
          <para>
            Switching to a LEGACY crypto-policy level makes your system and
            applications less secure.
          </para>
        </important>
      </step>
      <step>
        <para>
          After switching to a different policy level restart the system to
          apply the changes.
        </para>
      </step>
    </procedure>
  </sect1>
  <sect1>
    <title>Customizing existing crypto-policies</title>

    <para>
      You can modify aspects of any predefined policy by removing or adding
      algorithms or protocols. This way, you create a subpolicy (or policy
      modifier module), stored in text files that include the modifications.
      After creation, one or multiple subpolicies can be applied on the command
      line to one of the predefined policies. For details, see example ????.
    </para>

    <para>
      Subpolicies need to be stored in
      <filename>/usr/share/crypto-policies/policies/modules/</filename>. You
      can also find example subpolicies in this directory. The name of the
      subpolicy file must be <replaceable>MODULE</replaceable>.pmod, where
      <replaceable>MODULE</replaceable> is the name of the modifier in
      uppercase and without spaces.
    </para>

    <!--todo: add example and how to apply it, e.g. with update-crypto-policies -/-set DEFAULT:NO-SHA1-->
    <!--todo: add another section how to create a new policy from scratch-->
  </sect1>
</chapter>
